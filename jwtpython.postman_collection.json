{
	"info": {
		"_postman_id": "4ae75ebd-bb0d-4188-b7f8-70b7779fbcd8",
		"name": "jwtpython",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Home",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"JSON value check\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Flask JWT oauth\");",
							"    pm.expect(jsonData).to.have.property('time').to.be.a('string');",
							"    pm.expect(jsonData.env.SECRET_KEY).to.eql(\"yoursecretkey123789hbdh\");",
							"    pm.expect(jsonData.env.DEBUG).to.eql(\"True\");",
							"    pm.expect(jsonData.env.FLASK_ENV).to.eql(\"development\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}",
					"host": [
						"{{baseURL}}"
					]
				}
			},
			"response": [
				{
					"name": "200",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}",
							"host": [
								"{{baseURL}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "3405"
						},
						{
							"key": "Server",
							"value": "Werkzeug/1.0.1 Python/3.8.8"
						},
						{
							"key": "Date",
							"value": "Fri, 19 Aug 2022 11:40:31 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"env\": {\n        \"DEBUG\": \"True\",\n        \"FLASK_ENV\": \"development\",\n        \"TZ\": \"Asia/Calcutta\",\n        \"USER\": \"pritamkhose\"\n    },\n    \"message\": \"Flask JWT oauth\",\n    \"time\": \"Fri Aug 19 17:10:31 2022\"\n}"
				}
			]
		},
		{
			"name": "Postman",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/postman",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"postman"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"JSON value check\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message').to.be.a('string');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"pritam@gmail.com\",\r\n    \"password\": \"password\",\r\n    \"name\": \"pritam\"\r\n}"
				},
				"url": {
					"raw": "{{baseURL}}/signup",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": [
				{
					"name": "201",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"pritam@gmail.com\",\r\n    \"password\": \"password\",\r\n    \"name\": \"pritam\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/signup",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "55"
						},
						{
							"key": "Server",
							"value": "Werkzeug/1.0.1 Python/3.8.8"
						},
						{
							"key": "Date",
							"value": "Fri, 19 Aug 2022 11:41:32 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"Successfully registered.\"\n}"
				},
				{
					"name": "202",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"pritam@gmail.com\",\r\n    \"password\": \"password\",\r\n    \"name\": \"pritam\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/signup",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"status": "ACCEPTED",
					"code": 202,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "55"
						},
						{
							"key": "Server",
							"value": "Werkzeug/1.0.1 Python/3.8.8"
						},
						{
							"key": "Date",
							"value": "Fri, 19 Aug 2022 11:41:32 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"User already exists. Please Log in.\"\n}"
				},
				{
					"name": "422",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"pritam@gmail.com\",\r\n    \"password\": \"password\",\r\n    \"name\": \"pritam\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/signup",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
					"code": 422,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "55"
						},
						{
							"key": "Server",
							"value": "Werkzeug/1.0.1 Python/3.8.8"
						},
						{
							"key": "Date",
							"value": "Fri, 19 Aug 2022 11:41:32 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"error_message\": \"email, name and password is missing.\"\n}"
				}
			]
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"JSON value check\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('access_token').to.be.a('string');",
							"    pm.expect(jsonData).to.have.property('refresh_token').to.be.a('string');",
							"    pm.environment.set(\"access_token\", jsonData.access_token);",
							"    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"pritam@gmail.com\",\r\n    \"password\": \"password\"\r\n}"
				},
				"url": {
					"raw": "{{baseURL}}/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": [
				{
					"name": "201",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"pritam@gmail.com\",\r\n    \"password\": \"password\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"status": "CREATED",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "441"
						},
						{
							"key": "Server",
							"value": "Werkzeug/1.0.1 Python/3.8.8"
						},
						{
							"key": "Date",
							"value": "Fri, 19 Aug 2022 11:44:58 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwdWJsaWNfaWQiOiI4ZDI5YWYzOS1iM2VlLTRkYmYtOGRiMS1jYzMxZTkyN2U3NTMiLCJleHAiOjE2NjA5MDk3OTgsImlhdCI6MTY2MDkwOTQ5OH0.Ijkl45bTfer_MT8bYcIp9K96fPj3hBE6srlf6FsTjaw\",\n    \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwdWJsaWNfaWQiOiI4ZDI5YWYzOS1iM2VlLTRkYmYtOGRiMS1jYzMxZTkyN2U3NTMiLCJleHAiOjE2NjA5MTMwOTgsImlhdCI6MTY2MDkwOTQ5OH0.8VJPT60g8LZyeMypDKE5NRWIEtvygfmoHjXOrTw0qYE\"\n}"
				}
			]
		},
		{
			"name": "User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 406]);",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"JSON value check\", function () {",
							"    if(pm.response.code == 406) {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('error_message').to.be.a('string');",
							"        pm.expect(jsonData.error_message).to.eql(\"Access token is Invalid !!\");",
							"    } else {",
							"        var jsonData = pm.response.json().users[0];",
							"        pm.expect(jsonData).to.have.property('email').to.be.a('string');",
							"        pm.expect(jsonData).to.have.property('name').to.be.a('string');",
							"        pm.expect(jsonData).to.have.property('public_id').to.be.a('string');",
							"        pm.environment.set(\"access_token\", jsonData.access_token);",
							"        pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
							"    }    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{access_token}}"
					}
				],
				"url": {
					"raw": "{{baseURL}}/user",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": [
				{
					"name": "406",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{access_token}}"
							}
						],
						"url": {
							"raw": "{{baseURL}}/user",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"status": "NOT ACCEPTABLE",
					"code": 406,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "52"
						},
						{
							"key": "Server",
							"value": "Werkzeug/1.0.1 Python/3.8.8"
						},
						{
							"key": "Date",
							"value": "Fri, 19 Aug 2022 11:44:12 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"error_message\": \"Access token is Invalid !!\"\n}"
				}
			]
		},
		{
			"name": "Refresh token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 406, 408, 422, 500]);",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"JSON value check\", function () {",
							"    var jsonData = pm.response.json();",
							"    console.log(pm.response.code == 406, pm.response.code)",
							"    if(pm.response.code == 406) {",
							"        pm.expect(jsonData).to.have.property('error_message').to.be.a('string');",
							"        pm.expect(jsonData.error_message).to.eql(\"Refresh token is Invalid !!\");",
							"    } else {",
							"        pm.expect(jsonData).to.have.property('message').to.be.a('string');",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-refresh-token",
						"value": "{{refresh_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/refresh_token",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"refresh_token"
					]
				}
			},
			"response": [
				{
					"name": "406",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "x-refresh-token",
								"value": "{{refresh_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/refresh_token",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"refresh_token"
							]
						}
					},
					"status": "NOT ACCEPTABLE",
					"code": 406,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "53"
						},
						{
							"key": "Server",
							"value": "Werkzeug/1.0.1 Python/3.8.8"
						},
						{
							"key": "Date",
							"value": "Fri, 19 Aug 2022 11:40:09 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"error_message\": \"Refresh token is Invalid !!\"\n}"
				}
			]
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 406, 408, 422, 500]);",
							"});",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"JSON value check\", function () {",
							"    if(pm.response.code == 408) {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('error_message').to.be.a('string');",
							"        pm.expect(jsonData.error_message).to.eql(\"Refresh token is Expired !!\");",
							"    } else {",
							"        var jsonData = pm.response.json().users[0];",
							"        pm.expect(jsonData).to.have.property('email').to.be.a('string');",
							"        pm.expect(jsonData).to.have.property('name').to.be.a('string');",
							"        pm.expect(jsonData).to.have.property('public_id').to.be.a('string');",
							"        pm.environment.set(\"access_token\", jsonData.access_token);",
							"        pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
							"    }    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-refresh-token",
						"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwdWJsaWNfaWQiOiIxYWYxZmQ1NC1hMGE4LTQzMWMtYTBkNi05NjMxYjZkNDk2ZWMiLCJleHAiOjE2MjIzNzA4NTIsImlhdCI6MTYyMjM2NzI1Mn0.tPljXbP31pnzcFQennPtBn41Qza1UGR3E0N67jq2AAA",
						"type": "text"
					},
					{
						"key": "x-access-token",
						"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwdWJsaWNfaWQiOiIxYWYxZmQ1NC1hMGE4LTQzMWMtYTBkNi05NjMxYjZkNDk2ZWMiLCJleHAiOjE2MjIzNjc1NTIsImlhdCI6MTYyMjM2NzI1Mn0.t0vgK3sxWmVBiYhsh0NMlelkHHspmkZmRmvvFcLOnHk",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/logout",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"logout"
					]
				}
			},
			"response": [
				{
					"name": "408",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "x-refresh-token",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwdWJsaWNfaWQiOiIxYWYxZmQ1NC1hMGE4LTQzMWMtYTBkNi05NjMxYjZkNDk2ZWMiLCJleHAiOjE2MjIzNzA4NTIsImlhdCI6MTYyMjM2NzI1Mn0.tPljXbP31pnzcFQennPtBn41Qza1UGR3E0N67jq2AAA",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwdWJsaWNfaWQiOiIxYWYxZmQ1NC1hMGE4LTQzMWMtYTBkNi05NjMxYjZkNDk2ZWMiLCJleHAiOjE2MjIzNjc1NTIsImlhdCI6MTYyMjM2NzI1Mn0.t0vgK3sxWmVBiYhsh0NMlelkHHspmkZmRmvvFcLOnHk",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/logout",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"status": "REQUEST TIMEOUT",
					"code": 408,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "53"
						},
						{
							"key": "Server",
							"value": "Werkzeug/1.0.1 Python/3.8.8"
						},
						{
							"key": "Date",
							"value": "Fri, 19 Aug 2022 11:39:15 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"error_message\": \"Refresh token is Expired !!\"\n}"
				}
			]
		}
	]
}